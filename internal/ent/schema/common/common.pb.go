// Code generated by windranger, DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: internal/ent/schema/common/common.proto

package common

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 风牌
type Fon int32

const (
	Fon_FON_UNSET Fon = 0  // 保留字：未设置
	Fon_FON_TON   Fon = 1  // 东
	Fon_FON_NAN   Fon = 2  // 南
	Fon_FON_SHA   Fon = 3  // 西
	Fon_FON_PE    Fon = 4  // 北
	Fon_FON_CLEAR Fon = -1 // 保留字：清空
)

// Enum value maps for Fon.
var (
	Fon_name = map[int32]string{
		0:  "FON_UNSET",
		1:  "FON_TON",
		2:  "FON_NAN",
		3:  "FON_SHA",
		4:  "FON_PE",
		-1: "FON_CLEAR",
	}
	Fon_value = map[string]int32{
		"FON_UNSET": 0,
		"FON_TON":   1,
		"FON_NAN":   2,
		"FON_SHA":   3,
		"FON_PE":    4,
		"FON_CLEAR": -1,
	}
)

func (x Fon) Enum() *Fon {
	p := new(Fon)
	*p = x
	return p
}

func (x Fon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fon) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_ent_schema_common_common_proto_enumTypes[0].Descriptor()
}

func (Fon) Type() protoreflect.EnumType {
	return &file_internal_ent_schema_common_common_proto_enumTypes[0]
}

func (x Fon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fon.Descriptor instead.
func (Fon) EnumDescriptor() ([]byte, []int) {
	return file_internal_ent_schema_common_common_proto_rawDescGZIP(), []int{0}
}

// 种类
type Suit int32

const (
	Suit_SUIT_UNSET  Suit = 0  // 保留字：未设置
	Suit_SUIT_MANZU  Suit = 1  // 万
	Suit_SUIT_PINZU  Suit = 2  // 饼
	Suit_SUIT_SOUZU  Suit = 3  // 索
	Suit_SUIT_TSUPAI Suit = 4  // 字
	Suit_SUIT_CLEAR  Suit = -1 // 保留字：清空
)

// Enum value maps for Suit.
var (
	Suit_name = map[int32]string{
		0:  "SUIT_UNSET",
		1:  "SUIT_MANZU",
		2:  "SUIT_PINZU",
		3:  "SUIT_SOUZU",
		4:  "SUIT_TSUPAI",
		-1: "SUIT_CLEAR",
	}
	Suit_value = map[string]int32{
		"SUIT_UNSET":  0,
		"SUIT_MANZU":  1,
		"SUIT_PINZU":  2,
		"SUIT_SOUZU":  3,
		"SUIT_TSUPAI": 4,
		"SUIT_CLEAR":  -1,
	}
)

func (x Suit) Enum() *Suit {
	p := new(Suit)
	*p = x
	return p
}

func (x Suit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Suit) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_ent_schema_common_common_proto_enumTypes[1].Descriptor()
}

func (Suit) Type() protoreflect.EnumType {
	return &file_internal_ent_schema_common_common_proto_enumTypes[1]
}

func (x Suit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Suit.Descriptor instead.
func (Suit) EnumDescriptor() ([]byte, []int) {
	return file_internal_ent_schema_common_common_proto_rawDescGZIP(), []int{1}
}

// 有序类型
type OrderedKind int32

const (
	OrderedKind_ORDERED_KIND_UNSET  OrderedKind = 0  // 保留字：未设置
	OrderedKind_ORDERED_KIND_CHI    OrderedKind = 1  // 吃，顺子
	OrderedKind_ORDERED_KIND_PON    OrderedKind = 2  // 碰，刻子
	OrderedKind_ORDERED_KIND_KAN    OrderedKind = 3  // 杠
	OrderedKind_ORDERED_KIND_JANTOU OrderedKind = 4  // 雀头
	OrderedKind_ORDERED_KIND_CLEAR  OrderedKind = -1 // 保留字：清空
)

// Enum value maps for OrderedKind.
var (
	OrderedKind_name = map[int32]string{
		0:  "ORDERED_KIND_UNSET",
		1:  "ORDERED_KIND_CHI",
		2:  "ORDERED_KIND_PON",
		3:  "ORDERED_KIND_KAN",
		4:  "ORDERED_KIND_JANTOU",
		-1: "ORDERED_KIND_CLEAR",
	}
	OrderedKind_value = map[string]int32{
		"ORDERED_KIND_UNSET":  0,
		"ORDERED_KIND_CHI":    1,
		"ORDERED_KIND_PON":    2,
		"ORDERED_KIND_KAN":    3,
		"ORDERED_KIND_JANTOU": 4,
		"ORDERED_KIND_CLEAR":  -1,
	}
)

func (x OrderedKind) Enum() *OrderedKind {
	p := new(OrderedKind)
	*p = x
	return p
}

func (x OrderedKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderedKind) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_ent_schema_common_common_proto_enumTypes[2].Descriptor()
}

func (OrderedKind) Type() protoreflect.EnumType {
	return &file_internal_ent_schema_common_common_proto_enumTypes[2]
}

func (x OrderedKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderedKind.Descriptor instead.
func (OrderedKind) EnumDescriptor() ([]byte, []int) {
	return file_internal_ent_schema_common_common_proto_rawDescGZIP(), []int{2}
}

// 役种类型
type YakuKind int32

const (
	YakuKind_YAKU_KIND_UNSET                 YakuKind = 0  // 保留字：未设置
	YakuKind_YAKU_KIND_RICHI                 YakuKind = 1  // 一番
	YakuKind_YAKU_KIND_TANYAO                YakuKind = 2  // tanyao
	YakuKind_YAKU_KIND_TSUMO                 YakuKind = 3  // tsumo
	YakuKind_YAKU_KIND_MENFON                YakuKind = 4  // menfon
	YakuKind_YAKU_KIND_CHANFON               YakuKind = 5  // chanfon
	YakuKind_YAKU_KIND_SANGEN                YakuKind = 6  // sangen
	YakuKind_YAKU_KIND_PINFU                 YakuKind = 7  // pinfu
	YakuKind_YAKU_KIND_IPEKO                 YakuKind = 8  // ipeko
	YakuKind_YAKU_KIND_CHANKAN               YakuKind = 9  // chankan
	YakuKind_YAKU_KIND_RINSHAN_KAIHO         YakuKind = 10 // rinshan_kaiho
	YakuKind_YAKU_KIND_HAITEI_MOYUE          YakuKind = 11 // haitei_moyue
	YakuKind_YAKU_KIND_HOUTEI_RAOYUI         YakuKind = 12 // houtei_raoyui
	YakuKind_YAKU_KIND_IPPATSU               YakuKind = 13 // ippatsu
	YakuKind_YAKU_KIND_DORA                  YakuKind = 14 // dora
	YakuKind_YAKU_KIND_RI_DORA               YakuKind = 15 // ri_dora
	YakuKind_YAKU_KIND_AKA_DORA              YakuKind = 16 // aka_dora
	YakuKind_YAKU_KIND_PE_DORA               YakuKind = 17 // pe_dora
	YakuKind_YAKU_KIND_TSUBAMEGAESHI         YakuKind = 18 // tsubamegaeshi
	YakuKind_YAKU_KIND_KANFURI               YakuKind = 19 // kanfuri
	YakuKind_YAKU_KIND_SHIARURAOTAI          YakuKind = 20 // shiaruraotai
	YakuKind_YAKU_KIND_WRICHI                YakuKind = 21 // 二番
	YakuKind_YAKU_KIND_SANSHOKU_DOKO         YakuKind = 22 // sanshoku_doko
	YakuKind_YAKU_KIND_SANKANTSU             YakuKind = 23 // sankantsu
	YakuKind_YAKU_KIND_TOITOIHO              YakuKind = 24 // toitoiho
	YakuKind_YAKU_KIND_SANANKO               YakuKind = 25 // sananko
	YakuKind_YAKU_KIND_SHOSANGEN             YakuKind = 26 // shosangen
	YakuKind_YAKU_KIND_HONROUTOU             YakuKind = 27 // honroutou
	YakuKind_YAKU_KIND_CHITOITSU             YakuKind = 28 // chitoitsu
	YakuKind_YAKU_KIND_CHANTA                YakuKind = 29 // chanta
	YakuKind_YAKU_KIND_IKKITSUUKAN           YakuKind = 30 // ikkitsuukan
	YakuKind_YAKU_KIND_SANSHOKU_DOUJUN       YakuKind = 31 // sanshoku_doujun
	YakuKind_YAKU_KIND_UMENSAI               YakuKind = 32 // umensai
	YakuKind_YAKU_KIND_SANRENKO              YakuKind = 33 // sanrenko
	YakuKind_YAKU_KIND_RYANPEKO              YakuKind = 34 // 三番
	YakuKind_YAKU_KIND_JUNCHAN               YakuKind = 35 // junchan
	YakuKind_YAKU_KIND_HONISO                YakuKind = 36 // honiso
	YakuKind_YAKU_KIND_ISSHOKUSANJUN         YakuKind = 37 // isshokusanjun
	YakuKind_YAKU_KIND_CHINISO               YakuKind = 38 // 六番
	YakuKind_YAKU_KIND_NAGASHI_MANGAN        YakuKind = 39 // 满贯
	YakuKind_YAKU_KIND_IPINMOYUE             YakuKind = 40 // ipinmoyue
	YakuKind_YAKU_KIND_CHIYUPINRAOYUI        YakuKind = 41 // chiyupinraoyui
	YakuKind_YAKU_KIND_TENHO                 YakuKind = 42 // 役满
	YakuKind_YAKU_KIND_CHIHO                 YakuKind = 43 // chiho
	YakuKind_YAKU_KIND_DAISANGEN             YakuKind = 44 // daisangen
	YakuKind_YAKU_KIND_SUANKOU               YakuKind = 45 // suankou
	YakuKind_YAKU_KIND_TSUISO                YakuKind = 46 // tsuiso
	YakuKind_YAKU_KIND_RYUISO                YakuKind = 47 // ryuiso
	YakuKind_YAKU_KIND_CHINROUTOU            YakuKind = 48 // chinroutou
	YakuKind_YAKU_KIND_SHAOSUSHI             YakuKind = 49 // shaosushi
	YakuKind_YAKU_KIND_SUKANTSU              YakuKind = 50 // sukantsu
	YakuKind_YAKU_KIND_KOKUSHIMUSOU          YakuKind = 51 // kokushimusou
	YakuKind_YAKU_KIND_CHUURENPOUTOU         YakuKind = 52 // chuurenpoutou
	YakuKind_YAKU_KIND_RENHO                 YakuKind = 53 // renho
	YakuKind_YAKU_KIND_DAISHARIN             YakuKind = 54 // daisharin
	YakuKind_YAKU_KIND_DAICHIKURIN           YakuKind = 55 // daichikurin
	YakuKind_YAKU_KIND_DAISUURIN             YakuKind = 56 // daisuurin
	YakuKind_YAKU_KIND_ISHIGAMI_SANNEN       YakuKind = 57 // ishigami_sannen
	YakuKind_YAKU_KIND_SUANKOU_TANKI         YakuKind = 58 // 双倍役满
	YakuKind_YAKU_KIND_KOKUSHIMUSOU_JUSANMEN YakuKind = 59 // kokushimusou_jusanmen
	YakuKind_YAKU_KIND_JUNSEI_CHUURENPOUTOU  YakuKind = 60 // junsei_chuurenpoutou
	YakuKind_YAKU_KIND_DAISUSHI              YakuKind = 61 // daisushi
	YakuKind_YAKU_KIND_DAICHISHIN            YakuKind = 62 // daichishin
	YakuKind_YAKU_KIND_CLEAR                 YakuKind = -1 // 保留字：清空
)

// Enum value maps for YakuKind.
var (
	YakuKind_name = map[int32]string{
		0:  "YAKU_KIND_UNSET",
		1:  "YAKU_KIND_RICHI",
		2:  "YAKU_KIND_TANYAO",
		3:  "YAKU_KIND_TSUMO",
		4:  "YAKU_KIND_MENFON",
		5:  "YAKU_KIND_CHANFON",
		6:  "YAKU_KIND_SANGEN",
		7:  "YAKU_KIND_PINFU",
		8:  "YAKU_KIND_IPEKO",
		9:  "YAKU_KIND_CHANKAN",
		10: "YAKU_KIND_RINSHAN_KAIHO",
		11: "YAKU_KIND_HAITEI_MOYUE",
		12: "YAKU_KIND_HOUTEI_RAOYUI",
		13: "YAKU_KIND_IPPATSU",
		14: "YAKU_KIND_DORA",
		15: "YAKU_KIND_RI_DORA",
		16: "YAKU_KIND_AKA_DORA",
		17: "YAKU_KIND_PE_DORA",
		18: "YAKU_KIND_TSUBAMEGAESHI",
		19: "YAKU_KIND_KANFURI",
		20: "YAKU_KIND_SHIARURAOTAI",
		21: "YAKU_KIND_WRICHI",
		22: "YAKU_KIND_SANSHOKU_DOKO",
		23: "YAKU_KIND_SANKANTSU",
		24: "YAKU_KIND_TOITOIHO",
		25: "YAKU_KIND_SANANKO",
		26: "YAKU_KIND_SHOSANGEN",
		27: "YAKU_KIND_HONROUTOU",
		28: "YAKU_KIND_CHITOITSU",
		29: "YAKU_KIND_CHANTA",
		30: "YAKU_KIND_IKKITSUUKAN",
		31: "YAKU_KIND_SANSHOKU_DOUJUN",
		32: "YAKU_KIND_UMENSAI",
		33: "YAKU_KIND_SANRENKO",
		34: "YAKU_KIND_RYANPEKO",
		35: "YAKU_KIND_JUNCHAN",
		36: "YAKU_KIND_HONISO",
		37: "YAKU_KIND_ISSHOKUSANJUN",
		38: "YAKU_KIND_CHINISO",
		39: "YAKU_KIND_NAGASHI_MANGAN",
		40: "YAKU_KIND_IPINMOYUE",
		41: "YAKU_KIND_CHIYUPINRAOYUI",
		42: "YAKU_KIND_TENHO",
		43: "YAKU_KIND_CHIHO",
		44: "YAKU_KIND_DAISANGEN",
		45: "YAKU_KIND_SUANKOU",
		46: "YAKU_KIND_TSUISO",
		47: "YAKU_KIND_RYUISO",
		48: "YAKU_KIND_CHINROUTOU",
		49: "YAKU_KIND_SHAOSUSHI",
		50: "YAKU_KIND_SUKANTSU",
		51: "YAKU_KIND_KOKUSHIMUSOU",
		52: "YAKU_KIND_CHUURENPOUTOU",
		53: "YAKU_KIND_RENHO",
		54: "YAKU_KIND_DAISHARIN",
		55: "YAKU_KIND_DAICHIKURIN",
		56: "YAKU_KIND_DAISUURIN",
		57: "YAKU_KIND_ISHIGAMI_SANNEN",
		58: "YAKU_KIND_SUANKOU_TANKI",
		59: "YAKU_KIND_KOKUSHIMUSOU_JUSANMEN",
		60: "YAKU_KIND_JUNSEI_CHUURENPOUTOU",
		61: "YAKU_KIND_DAISUSHI",
		62: "YAKU_KIND_DAICHISHIN",
		-1: "YAKU_KIND_CLEAR",
	}
	YakuKind_value = map[string]int32{
		"YAKU_KIND_UNSET":                 0,
		"YAKU_KIND_RICHI":                 1,
		"YAKU_KIND_TANYAO":                2,
		"YAKU_KIND_TSUMO":                 3,
		"YAKU_KIND_MENFON":                4,
		"YAKU_KIND_CHANFON":               5,
		"YAKU_KIND_SANGEN":                6,
		"YAKU_KIND_PINFU":                 7,
		"YAKU_KIND_IPEKO":                 8,
		"YAKU_KIND_CHANKAN":               9,
		"YAKU_KIND_RINSHAN_KAIHO":         10,
		"YAKU_KIND_HAITEI_MOYUE":          11,
		"YAKU_KIND_HOUTEI_RAOYUI":         12,
		"YAKU_KIND_IPPATSU":               13,
		"YAKU_KIND_DORA":                  14,
		"YAKU_KIND_RI_DORA":               15,
		"YAKU_KIND_AKA_DORA":              16,
		"YAKU_KIND_PE_DORA":               17,
		"YAKU_KIND_TSUBAMEGAESHI":         18,
		"YAKU_KIND_KANFURI":               19,
		"YAKU_KIND_SHIARURAOTAI":          20,
		"YAKU_KIND_WRICHI":                21,
		"YAKU_KIND_SANSHOKU_DOKO":         22,
		"YAKU_KIND_SANKANTSU":             23,
		"YAKU_KIND_TOITOIHO":              24,
		"YAKU_KIND_SANANKO":               25,
		"YAKU_KIND_SHOSANGEN":             26,
		"YAKU_KIND_HONROUTOU":             27,
		"YAKU_KIND_CHITOITSU":             28,
		"YAKU_KIND_CHANTA":                29,
		"YAKU_KIND_IKKITSUUKAN":           30,
		"YAKU_KIND_SANSHOKU_DOUJUN":       31,
		"YAKU_KIND_UMENSAI":               32,
		"YAKU_KIND_SANRENKO":              33,
		"YAKU_KIND_RYANPEKO":              34,
		"YAKU_KIND_JUNCHAN":               35,
		"YAKU_KIND_HONISO":                36,
		"YAKU_KIND_ISSHOKUSANJUN":         37,
		"YAKU_KIND_CHINISO":               38,
		"YAKU_KIND_NAGASHI_MANGAN":        39,
		"YAKU_KIND_IPINMOYUE":             40,
		"YAKU_KIND_CHIYUPINRAOYUI":        41,
		"YAKU_KIND_TENHO":                 42,
		"YAKU_KIND_CHIHO":                 43,
		"YAKU_KIND_DAISANGEN":             44,
		"YAKU_KIND_SUANKOU":               45,
		"YAKU_KIND_TSUISO":                46,
		"YAKU_KIND_RYUISO":                47,
		"YAKU_KIND_CHINROUTOU":            48,
		"YAKU_KIND_SHAOSUSHI":             49,
		"YAKU_KIND_SUKANTSU":              50,
		"YAKU_KIND_KOKUSHIMUSOU":          51,
		"YAKU_KIND_CHUURENPOUTOU":         52,
		"YAKU_KIND_RENHO":                 53,
		"YAKU_KIND_DAISHARIN":             54,
		"YAKU_KIND_DAICHIKURIN":           55,
		"YAKU_KIND_DAISUURIN":             56,
		"YAKU_KIND_ISHIGAMI_SANNEN":       57,
		"YAKU_KIND_SUANKOU_TANKI":         58,
		"YAKU_KIND_KOKUSHIMUSOU_JUSANMEN": 59,
		"YAKU_KIND_JUNSEI_CHUURENPOUTOU":  60,
		"YAKU_KIND_DAISUSHI":              61,
		"YAKU_KIND_DAICHISHIN":            62,
		"YAKU_KIND_CLEAR":                 -1,
	}
)

func (x YakuKind) Enum() *YakuKind {
	p := new(YakuKind)
	*p = x
	return p
}

func (x YakuKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YakuKind) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_ent_schema_common_common_proto_enumTypes[3].Descriptor()
}

func (YakuKind) Type() protoreflect.EnumType {
	return &file_internal_ent_schema_common_common_proto_enumTypes[3]
}

func (x YakuKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use YakuKind.Descriptor instead.
func (YakuKind) EnumDescriptor() ([]byte, []int) {
	return file_internal_ent_schema_common_common_proto_rawDescGZIP(), []int{3}
}

// 对局设置
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players     *int64  `protobuf:"varint,1,opt,name=players,proto3,oneof" json:"players,omitempty"`         // 玩家数 (3或4)
	Rounds      *int64  `protobuf:"varint,2,opt,name=rounds,proto3,oneof" json:"rounds,omitempty"`           // 局数, 东风单位 (1/2/4)
	Time        *string `protobuf:"bytes,3,opt,name=time,proto3,oneof" json:"time,omitempty"`                // 时间, 采用a+b描述, a每次时间, b备用时间 (3+5/5+10/5+20/60+0/300+0)
	Transparent *bool   `protobuf:"varint,4,opt,name=transparent,proto3,oneof" json:"transparent,omitempty"` // 启用透明
	Tenbo       *int64  `protobuf:"varint,5,opt,name=tenbo,proto3,oneof" json:"tenbo,omitempty"`             // 起始点数: 最小单位100, 最大值200000
	Need        *int64  `protobuf:"varint,6,opt,name=need,proto3,oneof" json:"need,omitempty"`               // 1位必要点数: 最小单位100, 最大值200000，必须大于起始点数; ALL LAST时1位不足该点数将南入/西入
	Chi         *int64  `protobuf:"varint,7,opt,name=chi,proto3,oneof" json:"chi,omitempty"`                 // 赤宝牌数量 (0/3/4)
	Kuigae      *bool   `protobuf:"varint,8,opt,name=kuigae,proto3,oneof" json:"kuigae,omitempty"`           // 食替
	Kuitan      *bool   `protobuf:"varint,9,opt,name=kuitan,proto3,oneof" json:"kuitan,omitempty"`           // 食断
	Koyaku      *bool   `protobuf:"varint,10,opt,name=koyaku,proto3,oneof" json:"koyaku,omitempty"`          // 古役
	MinFan      *int64  `protobuf:"varint,11,opt,name=minFan,proto3,oneof" json:"minFan,omitempty"`          // 番缚 (1/2/4)
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_ent_schema_common_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_internal_ent_schema_common_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_internal_ent_schema_common_common_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetPlayers() int64 {
	if x != nil && x.Players != nil {
		return *x.Players
	}
	return 0
}

func (x *Config) GetRounds() int64 {
	if x != nil && x.Rounds != nil {
		return *x.Rounds
	}
	return 0
}

func (x *Config) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *Config) GetTransparent() bool {
	if x != nil && x.Transparent != nil {
		return *x.Transparent
	}
	return false
}

func (x *Config) GetTenbo() int64 {
	if x != nil && x.Tenbo != nil {
		return *x.Tenbo
	}
	return 0
}

func (x *Config) GetNeed() int64 {
	if x != nil && x.Need != nil {
		return *x.Need
	}
	return 0
}

func (x *Config) GetChi() int64 {
	if x != nil && x.Chi != nil {
		return *x.Chi
	}
	return 0
}

func (x *Config) GetKuigae() bool {
	if x != nil && x.Kuigae != nil {
		return *x.Kuigae
	}
	return false
}

func (x *Config) GetKuitan() bool {
	if x != nil && x.Kuitan != nil {
		return *x.Kuitan
	}
	return false
}

func (x *Config) GetKoyaku() bool {
	if x != nil && x.Koyaku != nil {
		return *x.Koyaku
	}
	return false
}

func (x *Config) GetMinFan() int64 {
	if x != nil && x.MinFan != nil {
		return *x.MinFan
	}
	return 0
}

// 麻将牌
type Tile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`                   // 名称
	Suit        *Suit   `protobuf:"varint,2,opt,name=suit,proto3,enum=common.Suit,oneof" json:"suit,omitempty"` // 种类
	Number      *int64  `protobuf:"varint,3,opt,name=number,proto3,oneof" json:"number,omitempty"`              // 数字
	Chi         *bool   `protobuf:"varint,4,opt,name=chi,proto3,oneof" json:"chi,omitempty"`                    // 红宝牌
	Transparent *bool   `protobuf:"varint,5,opt,name=transparent,proto3,oneof" json:"transparent,omitempty"`    // 透明
}

func (x *Tile) Reset() {
	*x = Tile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_ent_schema_common_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tile) ProtoMessage() {}

func (x *Tile) ProtoReflect() protoreflect.Message {
	mi := &file_internal_ent_schema_common_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tile.ProtoReflect.Descriptor instead.
func (*Tile) Descriptor() ([]byte, []int) {
	return file_internal_ent_schema_common_common_proto_rawDescGZIP(), []int{1}
}

func (x *Tile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Tile) GetSuit() Suit {
	if x != nil && x.Suit != nil {
		return *x.Suit
	}
	return Suit_SUIT_UNSET
}

func (x *Tile) GetNumber() int64 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *Tile) GetChi() bool {
	if x != nil && x.Chi != nil {
		return *x.Chi
	}
	return false
}

func (x *Tile) GetTransparent() bool {
	if x != nil && x.Transparent != nil {
		return *x.Transparent
	}
	return false
}

// 和牌状态
type AgariStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ken           *Fon   `protobuf:"varint,1,opt,name=ken,proto3,enum=common.Fon,oneof" json:"ken,omitempty"`      // 当前场风
	Kuitan        *bool  `protobuf:"varint,2,opt,name=kuitan,proto3,oneof" json:"kuitan,omitempty"`                // 是否食断
	Koyaku        *bool  `protobuf:"varint,3,opt,name=koyaku,proto3,oneof" json:"koyaku,omitempty"`                // 是否古役
	MinFan        *int64 `protobuf:"varint,4,opt,name=minFan,proto3,oneof" json:"minFan,omitempty"`                // 番缚
	Tenho         *bool  `protobuf:"varint,5,opt,name=tenho,proto3,oneof" json:"tenho,omitempty"`                  // 天和
	Chiho         *bool  `protobuf:"varint,6,opt,name=chiho,proto3,oneof" json:"chiho,omitempty"`                  // 地和
	Renho         *bool  `protobuf:"varint,7,opt,name=renho,proto3,oneof" json:"renho,omitempty"`                  // 人和
	Chankan       *bool  `protobuf:"varint,8,opt,name=chankan,proto3,oneof" json:"chankan,omitempty"`              // 是否抢杠
	Rinshankaiho  *bool  `protobuf:"varint,9,opt,name=rinshankaiho,proto3,oneof" json:"rinshankaiho,omitempty"`    // 是否岭上开花
	Saigo         *bool  `protobuf:"varint,10,opt,name=saigo,proto3,oneof" json:"saigo,omitempty"`                 // 是否最后一轮
	Tsubamegaeshi *bool  `protobuf:"varint,11,opt,name=tsubamegaeshi,proto3,oneof" json:"tsubamegaeshi,omitempty"` // 是否燕返
	Kanfuri       *bool  `protobuf:"varint,12,opt,name=kanfuri,proto3,oneof" json:"kanfuri,omitempty"`             // 是否杠振
}

func (x *AgariStatus) Reset() {
	*x = AgariStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_ent_schema_common_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgariStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgariStatus) ProtoMessage() {}

func (x *AgariStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_ent_schema_common_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgariStatus.ProtoReflect.Descriptor instead.
func (*AgariStatus) Descriptor() ([]byte, []int) {
	return file_internal_ent_schema_common_common_proto_rawDescGZIP(), []int{2}
}

func (x *AgariStatus) GetKen() Fon {
	if x != nil && x.Ken != nil {
		return *x.Ken
	}
	return Fon_FON_UNSET
}

func (x *AgariStatus) GetKuitan() bool {
	if x != nil && x.Kuitan != nil {
		return *x.Kuitan
	}
	return false
}

func (x *AgariStatus) GetKoyaku() bool {
	if x != nil && x.Koyaku != nil {
		return *x.Koyaku
	}
	return false
}

func (x *AgariStatus) GetMinFan() int64 {
	if x != nil && x.MinFan != nil {
		return *x.MinFan
	}
	return 0
}

func (x *AgariStatus) GetTenho() bool {
	if x != nil && x.Tenho != nil {
		return *x.Tenho
	}
	return false
}

func (x *AgariStatus) GetChiho() bool {
	if x != nil && x.Chiho != nil {
		return *x.Chiho
	}
	return false
}

func (x *AgariStatus) GetRenho() bool {
	if x != nil && x.Renho != nil {
		return *x.Renho
	}
	return false
}

func (x *AgariStatus) GetChankan() bool {
	if x != nil && x.Chankan != nil {
		return *x.Chankan
	}
	return false
}

func (x *AgariStatus) GetRinshankaiho() bool {
	if x != nil && x.Rinshankaiho != nil {
		return *x.Rinshankaiho
	}
	return false
}

func (x *AgariStatus) GetSaigo() bool {
	if x != nil && x.Saigo != nil {
		return *x.Saigo
	}
	return false
}

func (x *AgariStatus) GetTsubamegaeshi() bool {
	if x != nil && x.Tsubamegaeshi != nil {
		return *x.Tsubamegaeshi
	}
	return false
}

func (x *AgariStatus) GetKanfuri() bool {
	if x != nil && x.Kanfuri != nil {
		return *x.Kanfuri
	}
	return false
}

// 役种
type Yaku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fan       *int64    `protobuf:"varint,1,opt,name=fan,proto3,oneof" json:"fan,omitempty"`                                                // 番
	Yaku      *bool     `protobuf:"varint,2,opt,name=yaku,proto3,oneof" json:"yaku,omitempty"`                                              // 役
	Koyaku    *bool     `protobuf:"varint,3,opt,name=koyaku,proto3,oneof" json:"koyaku,omitempty"`                                          // 古役
	Kuisagari *bool     `protobuf:"varint,4,opt,name=kuisagari,proto3,oneof" json:"kuisagari,omitempty"`                                    // 食下役
	Name      *string   `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`                                               // 名称
	Desc      *string   `protobuf:"bytes,6,opt,name=desc,proto3,oneof" json:"desc,omitempty"`                                               // 描述
	YakuKind  *YakuKind `protobuf:"varint,7,opt,name=yaku_kind,json=yakuKind,proto3,enum=common.YakuKind,oneof" json:"yaku_kind,omitempty"` // 役种类型
}

func (x *Yaku) Reset() {
	*x = Yaku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_ent_schema_common_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Yaku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Yaku) ProtoMessage() {}

func (x *Yaku) ProtoReflect() protoreflect.Message {
	mi := &file_internal_ent_schema_common_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Yaku.ProtoReflect.Descriptor instead.
func (*Yaku) Descriptor() ([]byte, []int) {
	return file_internal_ent_schema_common_common_proto_rawDescGZIP(), []int{3}
}

func (x *Yaku) GetFan() int64 {
	if x != nil && x.Fan != nil {
		return *x.Fan
	}
	return 0
}

func (x *Yaku) GetYaku() bool {
	if x != nil && x.Yaku != nil {
		return *x.Yaku
	}
	return false
}

func (x *Yaku) GetKoyaku() bool {
	if x != nil && x.Koyaku != nil {
		return *x.Koyaku
	}
	return false
}

func (x *Yaku) GetKuisagari() bool {
	if x != nil && x.Kuisagari != nil {
		return *x.Kuisagari
	}
	return false
}

func (x *Yaku) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Yaku) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *Yaku) GetYakuKind() YakuKind {
	if x != nil && x.YakuKind != nil {
		return *x.YakuKind
	}
	return YakuKind_YAKU_KIND_UNSET
}

var File_internal_ent_schema_common_common_proto protoreflect.FileDescriptor

var file_internal_ent_schema_common_common_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x22, 0xba, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6e, 0x62,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x05, 0x74, 0x65, 0x6e, 0x62, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x63, 0x68, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x03, 0x63, 0x68, 0x69,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x75, 0x69, 0x67, 0x61, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x6b, 0x75, 0x69, 0x67, 0x61, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x75, 0x69, 0x74, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x08, 0x52, 0x06, 0x6b, 0x75, 0x69, 0x74, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6b, 0x6f, 0x79, 0x61, 0x6b, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52,
	0x06, 0x6b, 0x6f, 0x79, 0x61, 0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x46, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x46, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65, 0x6e, 0x62,
	0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63,
	0x68, 0x69, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x75, 0x69, 0x67, 0x61, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6b, 0x75, 0x69, 0x74, 0x61, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x6f, 0x79,
	0x61, 0x6b, 0x75, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x22, 0xd6,
	0x01, 0x0a, 0x04, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x75, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x68, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x03, 0x63, 0x68, 0x69, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x75, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x63, 0x68, 0x69, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x04, 0x0a, 0x0b, 0x41, 0x67, 0x61, 0x72,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b,
	0x75, 0x69, 0x74, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x6b,
	0x75, 0x69, 0x74, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x6f, 0x79, 0x61,
	0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x6b, 0x6f, 0x79, 0x61,
	0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x65, 0x6e, 0x68, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x05, 0x74, 0x65, 0x6e, 0x68, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x68, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x05,
	0x63, 0x68, 0x69, 0x68, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x68,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x05, 0x72, 0x65, 0x6e, 0x68, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6b, 0x61, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6b, 0x61, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x61, 0x69,
	0x68, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0c, 0x72, 0x69, 0x6e, 0x73,
	0x68, 0x61, 0x6e, 0x6b, 0x61, 0x69, 0x68, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x61, 0x69, 0x67, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x05, 0x73, 0x61,
	0x69, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x73, 0x75, 0x62, 0x61, 0x6d,
	0x65, 0x67, 0x61, 0x65, 0x73, 0x68, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52,
	0x0d, 0x74, 0x73, 0x75, 0x62, 0x61, 0x6d, 0x65, 0x67, 0x61, 0x65, 0x73, 0x68, 0x69, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6b, 0x61, 0x6e, 0x66, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0b, 0x52, 0x07, 0x6b, 0x61, 0x6e, 0x66, 0x75, 0x72, 0x69, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x75, 0x69,
	0x74, 0x61, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x6f, 0x79, 0x61, 0x6b, 0x75, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x65,
	0x6e, 0x68, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x68, 0x69, 0x68, 0x6f, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x72, 0x65, 0x6e, 0x68, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6b, 0x61, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x6e, 0x6b,
	0x61, 0x69, 0x68, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x61, 0x69, 0x67, 0x6f, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x73, 0x75, 0x62, 0x61, 0x6d, 0x65, 0x67, 0x61, 0x65, 0x73, 0x68, 0x69,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6b, 0x61, 0x6e, 0x66, 0x75, 0x72, 0x69, 0x22, 0xa6, 0x02, 0x0a,
	0x04, 0x59, 0x61, 0x6b, 0x75, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x66, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x79, 0x61, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x04, 0x79, 0x61,
	0x6b, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x6f, 0x79, 0x61, 0x6b, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x6b, 0x6f, 0x79, 0x61, 0x6b, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6b, 0x75, 0x69, 0x73, 0x61, 0x67, 0x61, 0x72, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x6b, 0x75, 0x69, 0x73, 0x61, 0x67, 0x61,
	0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x79, 0x61, 0x6b, 0x75, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x06, 0x52, 0x08,
	0x79, 0x61, 0x6b, 0x75, 0x4b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x66, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x79, 0x61, 0x6b, 0x75, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6b, 0x6f, 0x79, 0x61, 0x6b, 0x75, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6b, 0x75, 0x69, 0x73,
	0x61, 0x67, 0x61, 0x72, 0x69, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x79, 0x61, 0x6b, 0x75,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x5f, 0x0a, 0x03, 0x46, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x4e, 0x5f,
	0x4e, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x09, 0x46, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0x70, 0x0a, 0x04, 0x53, 0x75, 0x69, 0x74, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x5a, 0x55, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x5a, 0x55, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x5a, 0x55, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x53, 0x55, 0x50, 0x41, 0x49, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x0a, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0xa1, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x43, 0x48, 0x49, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x41, 0x4e,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4a, 0x41, 0x4e, 0x54, 0x4f, 0x55, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x12, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0xce, 0x0c, 0x0a,
	0x08, 0x59, 0x61, 0x6b, 0x75, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x41, 0x4b,
	0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x49, 0x43, 0x48,
	0x49, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x54, 0x41, 0x4e, 0x59, 0x41, 0x4f, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x41, 0x4b,
	0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x53, 0x55, 0x4d, 0x4f, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x4e, 0x46,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x46, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x59,
	0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x41, 0x4e, 0x47, 0x45, 0x4e, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50,
	0x49, 0x4e, 0x46, 0x55, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x49, 0x50, 0x45, 0x4b, 0x4f, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x59,
	0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4b, 0x41, 0x4e,
	0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x52, 0x49, 0x4e, 0x53, 0x48, 0x41, 0x4e, 0x5f, 0x4b, 0x41, 0x49, 0x48, 0x4f, 0x10, 0x0a, 0x12,
	0x1a, 0x0a, 0x16, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x49,
	0x54, 0x45, 0x49, 0x5f, 0x4d, 0x4f, 0x59, 0x55, 0x45, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x59,
	0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x55, 0x54, 0x45, 0x49, 0x5f,
	0x52, 0x41, 0x4f, 0x59, 0x55, 0x49, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x50, 0x50, 0x41, 0x54, 0x53, 0x55, 0x10, 0x0d, 0x12,
	0x12, 0x0a, 0x0e, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x4f, 0x52,
	0x41, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x52, 0x49, 0x5f, 0x44, 0x4f, 0x52, 0x41, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x59, 0x41,
	0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x4b, 0x41, 0x5f, 0x44, 0x4f, 0x52, 0x41,
	0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x50, 0x45, 0x5f, 0x44, 0x4f, 0x52, 0x41, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x59, 0x41, 0x4b,
	0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x53, 0x55, 0x42, 0x41, 0x4d, 0x45, 0x47, 0x41,
	0x45, 0x53, 0x48, 0x49, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x41, 0x4e, 0x46, 0x55, 0x52, 0x49, 0x10, 0x13, 0x12, 0x1a, 0x0a,
	0x16, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x49, 0x41, 0x52,
	0x55, 0x52, 0x41, 0x4f, 0x54, 0x41, 0x49, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x41, 0x4b,
	0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x43, 0x48, 0x49, 0x10, 0x15, 0x12,
	0x1b, 0x0a, 0x17, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x41, 0x4e,
	0x53, 0x48, 0x4f, 0x4b, 0x55, 0x5f, 0x44, 0x4f, 0x4b, 0x4f, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13,
	0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x41, 0x4e, 0x4b, 0x41, 0x4e,
	0x54, 0x53, 0x55, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x49, 0x54, 0x4f, 0x49, 0x48, 0x4f, 0x10, 0x18, 0x12, 0x15, 0x0a,
	0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x41, 0x4e, 0x41, 0x4e,
	0x4b, 0x4f, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x53, 0x48, 0x4f, 0x53, 0x41, 0x4e, 0x47, 0x45, 0x4e, 0x10, 0x1a, 0x12, 0x17, 0x0a,
	0x13, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x4e, 0x52, 0x4f,
	0x55, 0x54, 0x4f, 0x55, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x49, 0x54, 0x4f, 0x49, 0x54, 0x53, 0x55, 0x10, 0x1c, 0x12,
	0x14, 0x0a, 0x10, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x41, 0x10, 0x1d, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x49, 0x4b, 0x4b, 0x49, 0x54, 0x53, 0x55, 0x55, 0x4b, 0x41, 0x4e, 0x10, 0x1e,
	0x12, 0x1d, 0x0a, 0x19, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x41,
	0x4e, 0x53, 0x48, 0x4f, 0x4b, 0x55, 0x5f, 0x44, 0x4f, 0x55, 0x4a, 0x55, 0x4e, 0x10, 0x1f, 0x12,
	0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4d, 0x45,
	0x4e, 0x53, 0x41, 0x49, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x53, 0x41, 0x4e, 0x52, 0x45, 0x4e, 0x4b, 0x4f, 0x10, 0x21, 0x12, 0x16,
	0x0a, 0x12, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x59, 0x41, 0x4e,
	0x50, 0x45, 0x4b, 0x4f, 0x10, 0x22, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x4a, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x10, 0x23, 0x12, 0x14, 0x0a,
	0x10, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x4e, 0x49, 0x53,
	0x4f, 0x10, 0x24, 0x12, 0x1b, 0x0a, 0x17, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x49, 0x53, 0x53, 0x48, 0x4f, 0x4b, 0x55, 0x53, 0x41, 0x4e, 0x4a, 0x55, 0x4e, 0x10, 0x25,
	0x12, 0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x48,
	0x49, 0x4e, 0x49, 0x53, 0x4f, 0x10, 0x26, 0x12, 0x1c, 0x0a, 0x18, 0x59, 0x41, 0x4b, 0x55, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x47, 0x41, 0x53, 0x48, 0x49, 0x5f, 0x4d, 0x41, 0x4e,
	0x47, 0x41, 0x4e, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x49, 0x50, 0x49, 0x4e, 0x4d, 0x4f, 0x59, 0x55, 0x45, 0x10, 0x28, 0x12, 0x1c,
	0x0a, 0x18, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x49, 0x59,
	0x55, 0x50, 0x49, 0x4e, 0x52, 0x41, 0x4f, 0x59, 0x55, 0x49, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f,
	0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x4e, 0x48, 0x4f, 0x10,
	0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43,
	0x48, 0x49, 0x48, 0x4f, 0x10, 0x2b, 0x12, 0x17, 0x0a, 0x13, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x49, 0x53, 0x41, 0x4e, 0x47, 0x45, 0x4e, 0x10, 0x2c, 0x12,
	0x15, 0x0a, 0x11, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x41,
	0x4e, 0x4b, 0x4f, 0x55, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x54, 0x53, 0x55, 0x49, 0x53, 0x4f, 0x10, 0x2e, 0x12, 0x14, 0x0a, 0x10,
	0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x59, 0x55, 0x49, 0x53, 0x4f,
	0x10, 0x2f, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x43, 0x48, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x54, 0x4f, 0x55, 0x10, 0x30, 0x12, 0x17, 0x0a, 0x13,
	0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x4f, 0x53, 0x55,
	0x53, 0x48, 0x49, 0x10, 0x31, 0x12, 0x16, 0x0a, 0x12, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x53, 0x55, 0x4b, 0x41, 0x4e, 0x54, 0x53, 0x55, 0x10, 0x32, 0x12, 0x1a, 0x0a,
	0x16, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x4f, 0x4b, 0x55, 0x53,
	0x48, 0x49, 0x4d, 0x55, 0x53, 0x4f, 0x55, 0x10, 0x33, 0x12, 0x1b, 0x0a, 0x17, 0x59, 0x41, 0x4b,
	0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x55, 0x55, 0x52, 0x45, 0x4e, 0x50, 0x4f,
	0x55, 0x54, 0x4f, 0x55, 0x10, 0x34, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x48, 0x4f, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x59,
	0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x49, 0x53, 0x48, 0x41, 0x52,
	0x49, 0x4e, 0x10, 0x36, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x44, 0x41, 0x49, 0x43, 0x48, 0x49, 0x4b, 0x55, 0x52, 0x49, 0x4e, 0x10, 0x37, 0x12,
	0x17, 0x0a, 0x13, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x49,
	0x53, 0x55, 0x55, 0x52, 0x49, 0x4e, 0x10, 0x38, 0x12, 0x1d, 0x0a, 0x19, 0x59, 0x41, 0x4b, 0x55,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x53, 0x48, 0x49, 0x47, 0x41, 0x4d, 0x49, 0x5f, 0x53,
	0x41, 0x4e, 0x4e, 0x45, 0x4e, 0x10, 0x39, 0x12, 0x1b, 0x0a, 0x17, 0x59, 0x41, 0x4b, 0x55, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x41, 0x4e, 0x4b, 0x4f, 0x55, 0x5f, 0x54, 0x41, 0x4e,
	0x4b, 0x49, 0x10, 0x3a, 0x12, 0x23, 0x0a, 0x1f, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x4b, 0x4f, 0x4b, 0x55, 0x53, 0x48, 0x49, 0x4d, 0x55, 0x53, 0x4f, 0x55, 0x5f, 0x4a,
	0x55, 0x53, 0x41, 0x4e, 0x4d, 0x45, 0x4e, 0x10, 0x3b, 0x12, 0x22, 0x0a, 0x1e, 0x59, 0x41, 0x4b,
	0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4a, 0x55, 0x4e, 0x53, 0x45, 0x49, 0x5f, 0x43, 0x48,
	0x55, 0x55, 0x52, 0x45, 0x4e, 0x50, 0x4f, 0x55, 0x54, 0x4f, 0x55, 0x10, 0x3c, 0x12, 0x16, 0x0a,
	0x12, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x49, 0x53, 0x55,
	0x53, 0x48, 0x49, 0x10, 0x3d, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x44, 0x41, 0x49, 0x43, 0x48, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x10, 0x3e, 0x12,
	0x1c, 0x0a, 0x0f, 0x59, 0x41, 0x4b, 0x55, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x52, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x42, 0x38, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x7a, 0x79, 0x6a,
	0x65, 0x72, 0x72, 0x79, 0x2f, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_ent_schema_common_common_proto_rawDescOnce sync.Once
	file_internal_ent_schema_common_common_proto_rawDescData = file_internal_ent_schema_common_common_proto_rawDesc
)

func file_internal_ent_schema_common_common_proto_rawDescGZIP() []byte {
	file_internal_ent_schema_common_common_proto_rawDescOnce.Do(func() {
		file_internal_ent_schema_common_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_ent_schema_common_common_proto_rawDescData)
	})
	return file_internal_ent_schema_common_common_proto_rawDescData
}

var file_internal_ent_schema_common_common_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_internal_ent_schema_common_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_internal_ent_schema_common_common_proto_goTypes = []interface{}{
	(Fon)(0),            // 0: common.Fon
	(Suit)(0),           // 1: common.Suit
	(OrderedKind)(0),    // 2: common.OrderedKind
	(YakuKind)(0),       // 3: common.YakuKind
	(*Config)(nil),      // 4: common.Config
	(*Tile)(nil),        // 5: common.Tile
	(*AgariStatus)(nil), // 6: common.AgariStatus
	(*Yaku)(nil),        // 7: common.Yaku
}
var file_internal_ent_schema_common_common_proto_depIdxs = []int32{
	1, // 0: common.Tile.suit:type_name -> common.Suit
	0, // 1: common.AgariStatus.ken:type_name -> common.Fon
	3, // 2: common.Yaku.yaku_kind:type_name -> common.YakuKind
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_internal_ent_schema_common_common_proto_init() }
func file_internal_ent_schema_common_common_proto_init() {
	if File_internal_ent_schema_common_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_ent_schema_common_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_ent_schema_common_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_ent_schema_common_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgariStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_ent_schema_common_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Yaku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_ent_schema_common_common_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_internal_ent_schema_common_common_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_internal_ent_schema_common_common_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_internal_ent_schema_common_common_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_ent_schema_common_common_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_ent_schema_common_common_proto_goTypes,
		DependencyIndexes: file_internal_ent_schema_common_common_proto_depIdxs,
		EnumInfos:         file_internal_ent_schema_common_common_proto_enumTypes,
		MessageInfos:      file_internal_ent_schema_common_common_proto_msgTypes,
	}.Build()
	File_internal_ent_schema_common_common_proto = out.File
	file_internal_ent_schema_common_common_proto_rawDesc = nil
	file_internal_ent_schema_common_common_proto_goTypes = nil
	file_internal_ent_schema_common_common_proto_depIdxs = nil
}
